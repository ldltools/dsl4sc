(: $Id: print_in_scxml.xq,v 1.1 2018/01/23 02:59:23 sato Exp sato $ :)
(:
 * (C) Copyright IBM Corp. 2019.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 :)

declare default element namespace "https://github.com/ldltools/dsl4sc";
declare namespace dsl4sc = "https://github.com/ldltools/dsl4sc";

(: --------------------------------------------------------------------------------
   main
   --------------------------------------------------------------------------------
 :)

declare function local:print_in_puml ($doc)
{
  let $states0 := $doc//dsl4sc:states/dsl4sc:state
  (: we will discard the initial state that derives from the dfa generated by mona :)
  let $states :=
    for $state in $states0 where empty ($state/@initial) return $state
  let $initial :=
    for $state in $states0 where exists ($state/@initial)
    for $tr in $state/dsl4sc:transition where data ($tr/@alt_event) = "_init"
    return data ($tr/@to)

  let $transitions := $states/transition

  (:let $variables := $doc//dsl4sc:variables/dsl4sc:variable:)

  return
    ("@startuml",
     "left to right direction",
     "hide empty description",
     "&#x0a;",

     (: states :)
     for $q in $states
     return
       (concat ("state &#x22;", $q/@id, "&#x22; as ", $q/@id),
        for $w in tokenize ($q/formula/text (), " \| ")
        return concat ($q/@id, " : ", replace ($w, " &#x26; ", ","))),
     "&#x0a;",

     (: transitions :)
     concat ("[*] --> ", $initial),
     for $tr in $transitions
     let $ev := $tr/@event
     let $ev := 
       if (empty ($tr/@event)) then () else
       if (empty ($tr/@alt_event))
       then data ($tr/@event)
       else data ($tr/@alt_event)
     return concat ($tr/@from, " --> ", $tr/@to, if (empty ($ev) or not (matches ($ev, "[^ ]"))) then () else concat (" : ", $ev)),
     for $q in $states where $q/@final return concat ($q/@id, " --> [*]"),

     "&#x0a;",
     "@enduml")

};
