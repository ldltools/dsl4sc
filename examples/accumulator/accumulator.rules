// accumulator
// cf. https://en.wikipedia.org/wiki/Accumulator_(structured_product)
//
// events (incoming)
//   init, day_close, day_open
//
// events (raised, using SCXML.raise, and processed internally)
//   _knockout, _not_knockout
//   _over_strike, _under_strike
//   _terminate, _not_terminate
//
// events (sent out from this process, using SCXML.send, to external monitor processes)
//   init, day_close, day_open
//   knockout, terminate
//   ** note: these are NOT observable within this process
//

protocol
  init;
  day_close;
  (_not_knockout; (_under_strike + _over_strike); (_not_terminate; day_open; day_close)*)*;
  (_knockout + _terminate)
;;

rule

// [event] init (ko_price, strike_price, expiry_date, share_per_day, leverage)
on init
do
{
    SCXML.send ({"event" : _event}); // to external processes

    // knockout price
    _data.ko_price = _event.data.ko_price;

    // strike price that affects leveraged stock purchase at the end of each day
    _data.strike_price = _event.data.strike_price;
    _data.share_per_day = _event.data.share_per_day;
    _data.leverage = _event.data.leverage;
    _data.purchased = 0;

    _data.expiry_date = _event.data.expiry_date;
    _data.date = 1;
};

// [event] day_open
on day_open
do
{
    SCXML.send ({"event" : _event});

    _data.date = _data.date + 1;

    console.log ("open: ", _data.date);
};

// [event] day_close (price)
on day_close
raise (_knockout + _not_knockout)
    // raise either _knockout or _not_knockout in a non-deterministic manner
{
    SCXML.send ({"event" : _event});

    console.log ("close: ", _data.date, _event.data.price);

    _data.price = _event.data.price;
    if (_event.data.price >= _data.ko_price)
        SCXML.raise ({"event" : {"name" : "_knockout"}});
    else
        SCXML.raise ({"event" : {"name" : "_not_knockout"}});
};

// case: _knockout
on _knockout
do
{
    SCXML.send ({"event" : {"name" : "knockout"}});

    console.log ("knockout: ", _data.price);
    console.log ("purchased: ", _data.purchased);
};

// case: _not_knockout
on _not_knockout
raise (_over_strike + _under_strike)
{
    if (_data.price >= _data.strike_price)
        SCXML.raise ({"event" : {"name" : "_over_strike"}});
    else
        SCXML.raise ({"event" : {"name" : "_under_strike"}});
};

on _over_strike
raise (_terminate + _not_terminate)
{
    // purchase shares
    console.log ("purchase: ", _data.share_per_day);
    _data.purchased = _data.purchased + _data.share_per_day;

    if (_data.date >= _data.expiry_date)
        SCXML.raise ({"event" : {"name" : "_terminate"}});
    else
        SCXML.raise ({"event" : {"name" : "_not_terminate"}});
};

on _under_strike
raise (_terminate + _not_terminate)
{
    // purchase shares (leveraged)
    console.log ("purchase: ", _data.leverage * _data.share_per_day);
    _data.purchased = _data.purchased + _data.leverage * _data.share_per_day;

    if (_data.date >= _data.expiry_date)
        SCXML.raise ({"event" : {"name" : "_terminate"}});
    else
        SCXML.raise ({"event" : {"name" : "_not_terminate"}});
};

on _terminate
do
{
    SCXML.send ({"event" : {"name" : "terminate"}});

    console.log ("terminate: ", _data.date);
    console.log ("purchased: ", _data.purchased);
};